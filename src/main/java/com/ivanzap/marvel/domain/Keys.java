/*
 * This file is generated by jOOQ.
 */
package com.ivanzap.marvel.domain;


import com.ivanzap.marvel.domain.tables.Characters;
import com.ivanzap.marvel.domain.tables.CharactersComics;
import com.ivanzap.marvel.domain.tables.Comics;
import com.ivanzap.marvel.domain.tables.records.CharactersComicsRecord;
import com.ivanzap.marvel.domain.tables.records.CharactersRecord;
import com.ivanzap.marvel.domain.tables.records.ComicsRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CharactersRecord> CHARACTERS_PKEY = Internal.createUniqueKey(Characters.CHARACTERS, DSL.name("characters_pkey"), new TableField[] { Characters.CHARACTERS.ID }, true);
    public static final UniqueKey<ComicsRecord> COMICS_PKEY = Internal.createUniqueKey(Comics.COMICS, DSL.name("comics_pkey"), new TableField[] { Comics.COMICS.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<CharactersComicsRecord, CharactersRecord> CHARACTERS_COMICS__CHARACTERS_COMICS_CHARACTER_ID_FKEY = Internal.createForeignKey(CharactersComics.CHARACTERS_COMICS, DSL.name("characters_comics_character_id_fkey"), new TableField[] { CharactersComics.CHARACTERS_COMICS.CHARACTER_ID }, Keys.CHARACTERS_PKEY, new TableField[] { Characters.CHARACTERS.ID }, true);
    public static final ForeignKey<CharactersComicsRecord, ComicsRecord> CHARACTERS_COMICS__CHARACTERS_COMICS_COMIC_ID_FKEY = Internal.createForeignKey(CharactersComics.CHARACTERS_COMICS, DSL.name("characters_comics_comic_id_fkey"), new TableField[] { CharactersComics.CHARACTERS_COMICS.COMIC_ID }, Keys.COMICS_PKEY, new TableField[] { Comics.COMICS.ID }, true);
}
