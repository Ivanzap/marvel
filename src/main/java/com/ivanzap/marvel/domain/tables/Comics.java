/*
 * This file is generated by jOOQ.
 */
package com.ivanzap.marvel.domain.tables;


import com.ivanzap.marvel.domain.Keys;
import com.ivanzap.marvel.domain.Public;
import com.ivanzap.marvel.domain.tables.records.ComicsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Comics extends TableImpl<ComicsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.comics</code>
     */
    public static final Comics COMICS = new Comics();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ComicsRecord> getRecordType() {
        return ComicsRecord.class;
    }

    /**
     * The column <code>public.comics.id</code>.
     */
    public final TableField<ComicsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.comics.title</code>.
     */
    public final TableField<ComicsRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.comics.description</code>.
     */
    public final TableField<ComicsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    private Comics(Name alias, Table<ComicsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Comics(Name alias, Table<ComicsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.comics</code> table reference
     */
    public Comics(String alias) {
        this(DSL.name(alias), COMICS);
    }

    /**
     * Create an aliased <code>public.comics</code> table reference
     */
    public Comics(Name alias) {
        this(alias, COMICS);
    }

    /**
     * Create a <code>public.comics</code> table reference
     */
    public Comics() {
        this(DSL.name("comics"), null);
    }

    public <O extends Record> Comics(Table<O> child, ForeignKey<O, ComicsRecord> key) {
        super(child, key, COMICS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<ComicsRecord, Integer> getIdentity() {
        return (Identity<ComicsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ComicsRecord> getPrimaryKey() {
        return Keys.COMICS_PKEY;
    }

    @Override
    public List<UniqueKey<ComicsRecord>> getKeys() {
        return Arrays.<UniqueKey<ComicsRecord>>asList(Keys.COMICS_PKEY);
    }

    @Override
    public Comics as(String alias) {
        return new Comics(DSL.name(alias), this);
    }

    @Override
    public Comics as(Name alias) {
        return new Comics(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Comics rename(String name) {
        return new Comics(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Comics rename(Name name) {
        return new Comics(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
