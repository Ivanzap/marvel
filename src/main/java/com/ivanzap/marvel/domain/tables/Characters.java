/*
 * This file is generated by jOOQ.
 */
package com.ivanzap.marvel.domain.tables;


import com.ivanzap.marvel.domain.Keys;
import com.ivanzap.marvel.domain.Public;
import com.ivanzap.marvel.domain.tables.records.CharactersRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Characters extends TableImpl<CharactersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.characters</code>
     */
    public static final Characters CHARACTERS = new Characters();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CharactersRecord> getRecordType() {
        return CharactersRecord.class;
    }

    /**
     * The column <code>public.characters.id</code>.
     */
    public final TableField<CharactersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.characters.name</code>.
     */
    public final TableField<CharactersRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.characters.description</code>.
     */
    public final TableField<CharactersRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    private Characters(Name alias, Table<CharactersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Characters(Name alias, Table<CharactersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.characters</code> table reference
     */
    public Characters(String alias) {
        this(DSL.name(alias), CHARACTERS);
    }

    /**
     * Create an aliased <code>public.characters</code> table reference
     */
    public Characters(Name alias) {
        this(alias, CHARACTERS);
    }

    /**
     * Create a <code>public.characters</code> table reference
     */
    public Characters() {
        this(DSL.name("characters"), null);
    }

    public <O extends Record> Characters(Table<O> child, ForeignKey<O, CharactersRecord> key) {
        super(child, key, CHARACTERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<CharactersRecord, Integer> getIdentity() {
        return (Identity<CharactersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CharactersRecord> getPrimaryKey() {
        return Keys.CHARACTERS_PKEY;
    }

    @Override
    public List<UniqueKey<CharactersRecord>> getKeys() {
        return Arrays.<UniqueKey<CharactersRecord>>asList(Keys.CHARACTERS_PKEY);
    }

    @Override
    public Characters as(String alias) {
        return new Characters(DSL.name(alias), this);
    }

    @Override
    public Characters as(Name alias) {
        return new Characters(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Characters rename(String name) {
        return new Characters(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Characters rename(Name name) {
        return new Characters(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
