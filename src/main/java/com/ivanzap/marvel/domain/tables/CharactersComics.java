/*
 * This file is generated by jOOQ.
 */
package com.ivanzap.marvel.domain.tables;


import com.ivanzap.marvel.domain.Keys;
import com.ivanzap.marvel.domain.Public;
import com.ivanzap.marvel.domain.tables.records.CharactersComicsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CharactersComics extends TableImpl<CharactersComicsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.characters_comics</code>
     */
    public static final CharactersComics CHARACTERS_COMICS = new CharactersComics();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CharactersComicsRecord> getRecordType() {
        return CharactersComicsRecord.class;
    }

    /**
     * The column <code>public.characters_comics.character_id</code>.
     */
    public final TableField<CharactersComicsRecord, Integer> CHARACTER_ID = createField(DSL.name("character_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.characters_comics.comic_id</code>.
     */
    public final TableField<CharactersComicsRecord, Integer> COMIC_ID = createField(DSL.name("comic_id"), SQLDataType.INTEGER, this, "");

    private CharactersComics(Name alias, Table<CharactersComicsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CharactersComics(Name alias, Table<CharactersComicsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.characters_comics</code> table reference
     */
    public CharactersComics(String alias) {
        this(DSL.name(alias), CHARACTERS_COMICS);
    }

    /**
     * Create an aliased <code>public.characters_comics</code> table reference
     */
    public CharactersComics(Name alias) {
        this(alias, CHARACTERS_COMICS);
    }

    /**
     * Create a <code>public.characters_comics</code> table reference
     */
    public CharactersComics() {
        this(DSL.name("characters_comics"), null);
    }

    public <O extends Record> CharactersComics(Table<O> child, ForeignKey<O, CharactersComicsRecord> key) {
        super(child, key, CHARACTERS_COMICS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<CharactersComicsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CharactersComicsRecord, ?>>asList(Keys.CHARACTERS_COMICS__CHARACTERS_COMICS_CHARACTER_ID_FKEY, Keys.CHARACTERS_COMICS__CHARACTERS_COMICS_COMIC_ID_FKEY);
    }

    private transient Characters _characters;
    private transient Comics _comics;

    public Characters characters() {
        if (_characters == null)
            _characters = new Characters(this, Keys.CHARACTERS_COMICS__CHARACTERS_COMICS_CHARACTER_ID_FKEY);

        return _characters;
    }

    public Comics comics() {
        if (_comics == null)
            _comics = new Comics(this, Keys.CHARACTERS_COMICS__CHARACTERS_COMICS_COMIC_ID_FKEY);

        return _comics;
    }

    @Override
    public CharactersComics as(String alias) {
        return new CharactersComics(DSL.name(alias), this);
    }

    @Override
    public CharactersComics as(Name alias) {
        return new CharactersComics(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CharactersComics rename(String name) {
        return new CharactersComics(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CharactersComics rename(Name name) {
        return new CharactersComics(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
